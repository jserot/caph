-- A handcrafted implementation of an actor performing integer division
-- This file is supplied by the programmer (and not generated by the CAPH compiler)
-- 2015-10-23, JS/FB

library ieee,caph;
use ieee.std_logic_1164.all;
use caph.core.all;
use ieee.numeric_std.all;

entity my_div is
   port (
    a_empty: in std_logic;
    a: in std_logic_vector(7 downto 0);
    a_rd: out std_logic;
    b_empty: in std_logic;
    b: in std_logic_vector(7 downto 0);
    b_rd: out std_logic;
    c_full: in std_logic;
    c: out std_logic_vector(7 downto 0);
    c_wr: out std_logic;
    clock: in std_logic;
    reset: in std_logic
    );
end my_div;

architecture FSM of my_div is
begin
  comb: process(a, a_empty, b, b_empty, c_full)
    variable x : unsigned(15 downto 0);
    variable y : unsigned(15 downto 0);
    variable z : unsigned(15 downto 0);
    variable r :  unsigned(7 downto 0);
  begin
    -- b.rdy, a.rdy, c.rdy / y=b, x=a, wr(c,x / y)
    if b_empty='0' and a_empty='0' and c_full='0' then
      x := "00000000" & from_std_logic_vector(a,8);
      a_rd <= '1';
      y := "00000000" & from_std_logic_vector(b,8);
      b_rd <= '1';
      for i in 7 downto 0 loop
       z := shift_left(y,i);
       if ( x > z ) then
         r(i) := '1';    
        x := x - z;
       else
         r(i) := '0';   
        end if;
      end loop;
      c <= std_logic_vector(r);
      c_wr <= '1';
    else
      a_rd <= '0';
      b_rd <= '0';
      c_wr <= '0';
      c <= (others => 'X');
    end if;
  end process;
end FSM;
